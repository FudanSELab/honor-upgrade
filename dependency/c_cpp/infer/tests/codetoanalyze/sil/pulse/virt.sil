// Copyright (c) Facebook, Inc. and its affiliates.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree.

.source_language = "hack"

type Num .abstract {}

declare Num.value(*Int): int

type Int extends Num = { value: int }

define Int.value(this: *Int): int {
  #b0:
    n0: *Int = load &this
    n1: int = load n0.Int.value
    ret n1
}

define plus(arg1: *Int, to_add: int) : int {
  #b0:
    n0: *Int = load &arg1
    n1 = n0.Int.value() // virtual call Int.value(n0)
    n2: int = load &to_add
    ret __sil_plusa_int(n1, n2)
}

define plusOk(arg1: *Int): int {
  #b0:
    n0: *Int = load &arg1
    ret plus(n0, 2)
}

define plusBad() : int {
  #b0:
    ret plus(null, 7)
}

// we now test devirtualization by summary specialization
define num_value(arg: *Num) : int {
  #entry:
    n0: *Num = load &arg
    ret n0.Num.value()
}

define call_num_value_on_allocated_int() : int {
  #entry:
    n0 = __sil_allocate(<Int>)
    store n0.Int.value <- 42 : int
    ret num_value(n0)
}

define test_dyntype_specialization_bad(x: *Int) : void {
  #entry:
    n0 = __sil_eq(call_num_value_on_allocated_int(), 42)
    prune n0
    store &x <- null : *Int
    n1: *Int = load &x
    n2: int = load n1.Int.value
    ret null
}

define test_dyntype_specialization_good(x: *Int) : void {
  #entry:
    n0 = __sil_eq(call_num_value_on_allocated_int(), 42)
    prune !n0
    store &x <- null : *Int
    n1: *Int = load &x
    n2: int = load n1.Int.value
    ret null
}

// the next test requires devirtualization to propagate its need
// in the call chain

define num_value_caller(arg: *Num) : int {
  #entry:
    n0: *Num = load &arg
    ret num_value(n0)
}

define call_num_value_caller_on_allocated_int() : int {
  #entry:
    n0 = __sil_allocate(<Int>)
    store n0.Int.value <- 42 : int
    ret num_value_caller(n0)
}

define test_dyntype_specialization_from_caller_bad(x: *Int) : void {
  #entry:
    n0 = __sil_eq(call_num_value_caller_on_allocated_int(), 42)
    prune n0
    store &x <- null : *Int
    n1: *Int = load &x
    n2: int = load n1.Int.value
    ret null
}

define test_dyntype_specialization_from_caller_good(x: *Int) : void {
  #entry:
    n0 = __sil_eq(call_num_value_caller_on_allocated_int(), 42)
    prune !n0
    store &x <- null : *Int
    n1: *Int = load &x
    n2: int = load n1.Int.value
    ret null
}

// devirtualization on final class should be easier
type I42 extends Int .final { }

define I42.value(this: *I42): int {
  #b0:
    ret 42
}

define call_num_value_on_declared_i42(arg: *I42) : int {
  #entry:
    n0: *I42 = load &arg
    ret num_value(n0)
}

define devirtualize_with_final_bad(arg: *I42) : void {
  local x: *Int
  #b0:
    n3: *I42 = load &arg
    n0 = __sil_eq(call_num_value_on_declared_i42(n3), 42)
    prune n0
    store &x <- null : *Int
    n1: *Int = load &x
    n2: int = load n1.Int.value
    ret null
}

define devirtualize_with_final_good(arg: *I42) : void {
  local x: *Int
  #b0:
    n3: *I42 = load &arg
    n0 = __sil_eq(call_num_value_on_declared_i42(n3), 42)
    prune !n0
    store &x <- null : *Int
    n1: *Int = load &x
    n2: int = load n1.Int.value
    ret null
}

// static call through the class object of an object
type Num$static = .static {}

declare Num$static.zero(*Num$static): int

type Int$static extends Num$static = .static {}

define Int$static.zero(this: *Int$static): int {
  #entry:
    ret 0
}

define Int.zero(this: *Int): int {
  #entry:
    n0: *Int = load &this
    n1 = $builtins.hack_get_static_class(n0)
    ret n1.Num$static.zero()
}

define devirtualize_with_static_call_bad() : void {
  local x: *Int
  #b0:
    n3 = __sil_allocate(<Int>)
    n0 = __sil_eq(n3.Int.zero(), 0)
    prune n0
    store &x <- null : *Int
    n1: *Int = load &x
    n2: int = load n1.Int.value
    ret null
}

define devirtualize_with_static_call_good(arg: *I42) : void {
  local x: *Int
  #b0:
    n3 = __sil_allocate(<Int>)
    n0 = __sil_eq(n3.Int.zero(), 0)
    prune !n0
    store &x <- null : *Int
    n1: *Int = load &x
    n2: int = load n1.Int.value
    ret null
}

declare $builtins.hack_get_static_class(*void): *class
