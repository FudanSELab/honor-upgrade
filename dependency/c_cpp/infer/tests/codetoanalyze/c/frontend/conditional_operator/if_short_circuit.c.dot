/* @generated */
digraph cfg {
"main.fad58de7366495db_1" [label="1: Start main\nFormals: \nLocals:  block_size:char* spec:char* \n  " color=yellow style=filled]
	

	 "main.fad58de7366495db_1" -> "main.fad58de7366495db_19" ;
"main.fad58de7366495db_2" [label="2: Exit main \n  " color=yellow style=filled]
	

"main.fad58de7366495db_3" [label="3:  Return Stmt \n   *&return:int=0 [line 54, column 3]\n " shape="box"]
	

	 "main.fad58de7366495db_3" -> "main.fad58de7366495db_2" ;
"main.fad58de7366495db_4" [label="4: + \n   END_BRANCHES\n " ]
	

	 "main.fad58de7366495db_4" -> "main.fad58de7366495db_3" ;
"main.fad58de7366495db_5" [label="5: Prune (true branch, if (terminated)) \n   n$0=*&spec:char* [line 47, column 8]\n  PRUNE(!n$0, true); [line 47, column 8]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_5" -> "main.fad58de7366495db_7" ;
"main.fad58de7366495db_6" [label="6: Prune (false branch, if (terminated)) \n   n$0=*&spec:char* [line 47, column 8]\n  PRUNE(n$0, false); [line 47, column 8]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_6" -> "main.fad58de7366495db_15" ;
"main.fad58de7366495db_7" [label="7:  BinaryOperatorStmt: Assign \n   n$1=_fun_getenv(\"BLOCK_SIZE\":char*) [line 47, column 25]\n  *&spec:char*=n$1 [line 47, column 18]\n  n$2=*&spec:char* [line 47, column 18]\n " shape="box"]
	

	 "main.fad58de7366495db_7" -> "main.fad58de7366495db_8" ;
	 "main.fad58de7366495db_7" -> "main.fad58de7366495db_9" ;
"main.fad58de7366495db_8" [label="8: Prune (true branch, if (terminated)) \n   PRUNE(!n$2, true); [line 47, column 18]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_8" -> "main.fad58de7366495db_10" ;
"main.fad58de7366495db_9" [label="9: Prune (false branch, if (terminated)) \n   PRUNE(n$2, false); [line 47, column 18]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_9" -> "main.fad58de7366495db_15" ;
"main.fad58de7366495db_10" [label="10:  BinaryOperatorStmt: Assign \n   n$3=_fun_getenv(\"BLOCKSIZE\":char*) [line 47, column 59]\n  *&spec:char*=n$3 [line 47, column 52]\n  n$4=*&spec:char* [line 47, column 52]\n " shape="box"]
	

	 "main.fad58de7366495db_10" -> "main.fad58de7366495db_11" ;
	 "main.fad58de7366495db_10" -> "main.fad58de7366495db_12" ;
"main.fad58de7366495db_11" [label="11: Prune (true branch, if (terminated)) \n   PRUNE(!n$4, true); [line 47, column 52]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_11" -> "main.fad58de7366495db_13" ;
"main.fad58de7366495db_12" [label="12: Prune (false branch, if (terminated)) \n   PRUNE(n$4, false); [line 47, column 52]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_12" -> "main.fad58de7366495db_15" ;
"main.fad58de7366495db_13" [label="13:  BinaryOperatorStmt: Assign \n   *&block_size:char*=null [line 48, column 5]\n " shape="box"]
	

	 "main.fad58de7366495db_13" -> "main.fad58de7366495db_4" ;
"main.fad58de7366495db_14" [label="14: + \n   END_BRANCHES\n " ]
	

	 "main.fad58de7366495db_14" -> "main.fad58de7366495db_4" ;
"main.fad58de7366495db_15" [label="15:  BinaryOperatorStmt: EQ \n   n$5=*&spec:char* [line 50, column 10]\n  n$6=*n$5:char [line 50, column 9]\n " shape="box"]
	

	 "main.fad58de7366495db_15" -> "main.fad58de7366495db_16" ;
	 "main.fad58de7366495db_15" -> "main.fad58de7366495db_17" ;
"main.fad58de7366495db_16" [label="16: Prune (true branch, if (terminated)) \n   PRUNE((n$6 == 39), true); [line 50, column 9]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_16" -> "main.fad58de7366495db_18" ;
"main.fad58de7366495db_17" [label="17: Prune (false branch, if (terminated)) \n   PRUNE(!(n$6 == 39), false); [line 50, column 9]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_17" -> "main.fad58de7366495db_14" ;
"main.fad58de7366495db_18" [label="18:  BinaryOperatorStmt: Assign \n   *&block_size:char*=null [line 51, column 7]\n " shape="box"]
	

	 "main.fad58de7366495db_18" -> "main.fad58de7366495db_14" ;
"main.fad58de7366495db_19" [label="19:  BinaryOperatorStmt: Assign \n   n$10=_fun_getenv(\"BLOCK\":char*) [line 45, column 10]\n  *&spec:char*=n$10 [line 45, column 3]\n " shape="box"]
	

	 "main.fad58de7366495db_19" -> "main.fad58de7366495db_5" ;
	 "main.fad58de7366495db_19" -> "main.fad58de7366495db_6" ;
"shortcircuit_and.10f9635d805ff3bd_1" [label="1: Start shortcircuit_and\nFormals:  x:int*\nLocals:  \n  " color=yellow style=filled]
	

	 "shortcircuit_and.10f9635d805ff3bd_1" -> "shortcircuit_and.10f9635d805ff3bd_5" ;
	 "shortcircuit_and.10f9635d805ff3bd_1" -> "shortcircuit_and.10f9635d805ff3bd_6" ;
"shortcircuit_and.10f9635d805ff3bd_2" [label="2: Exit shortcircuit_and \n  " color=yellow style=filled]
	

"shortcircuit_and.10f9635d805ff3bd_3" [label="3: + \n   END_BRANCHES\n " ]
	

	 "shortcircuit_and.10f9635d805ff3bd_3" -> "shortcircuit_and.10f9635d805ff3bd_4" ;
"shortcircuit_and.10f9635d805ff3bd_4" [label="4:  between_join_and_exit \n   END_BRANCHES\n " shape="box"]
	

	 "shortcircuit_and.10f9635d805ff3bd_4" -> "shortcircuit_and.10f9635d805ff3bd_2" ;
"shortcircuit_and.10f9635d805ff3bd_5" [label="5: Prune (true branch, if (terminated)) \n   n$1=*&x:int* [line 20, column 8]\n  PRUNE(!n$1, true); [line 20, column 8]\n " shape="invhouse"]
	

	 "shortcircuit_and.10f9635d805ff3bd_5" -> "shortcircuit_and.10f9635d805ff3bd_7" ;
"shortcircuit_and.10f9635d805ff3bd_6" [label="6: Prune (false branch, if (terminated)) \n   n$1=*&x:int* [line 20, column 8]\n  PRUNE(n$1, false); [line 20, column 8]\n " shape="invhouse"]
	

	 "shortcircuit_and.10f9635d805ff3bd_6" -> "shortcircuit_and.10f9635d805ff3bd_11" ;
"shortcircuit_and.10f9635d805ff3bd_7" [label="7:  BinaryOperatorStmt: Assign \n   n$2=_fun_getenv(\"BLOCK\":char*) [line 20, column 19]\n  *&x:int*=(int*)n$2 [line 20, column 15]\n  n$3=*&x:int* [line 20, column 15]\n " shape="box"]
	

	 "shortcircuit_and.10f9635d805ff3bd_7" -> "shortcircuit_and.10f9635d805ff3bd_8" ;
	 "shortcircuit_and.10f9635d805ff3bd_7" -> "shortcircuit_and.10f9635d805ff3bd_9" ;
"shortcircuit_and.10f9635d805ff3bd_8" [label="8: Prune (true branch, if (terminated)) \n   PRUNE(!n$3, true); [line 20, column 15]\n " shape="invhouse"]
	

	 "shortcircuit_and.10f9635d805ff3bd_8" -> "shortcircuit_and.10f9635d805ff3bd_10" ;
"shortcircuit_and.10f9635d805ff3bd_9" [label="9: Prune (false branch, if (terminated)) \n   PRUNE(n$3, false); [line 20, column 15]\n " shape="invhouse"]
	

	 "shortcircuit_and.10f9635d805ff3bd_9" -> "shortcircuit_and.10f9635d805ff3bd_11" ;
"shortcircuit_and.10f9635d805ff3bd_10" [label="10:  BinaryOperatorStmt: Assign \n   *&x:int*=17 [line 21, column 5]\n " shape="box"]
	

	 "shortcircuit_and.10f9635d805ff3bd_10" -> "shortcircuit_and.10f9635d805ff3bd_3" ;
"shortcircuit_and.10f9635d805ff3bd_11" [label="11:  BinaryOperatorStmt: Assign \n   n$4=*&x:int* [line 23, column 6]\n  *n$4:int=32 [line 23, column 5]\n " shape="box"]
	

	 "shortcircuit_and.10f9635d805ff3bd_11" -> "shortcircuit_and.10f9635d805ff3bd_3" ;
"shortcircuit_or.5845fe75b89f8af7_1" [label="1: Start shortcircuit_or\nFormals:  x:int*\nLocals:  \n  " color=yellow style=filled]
	

	 "shortcircuit_or.5845fe75b89f8af7_1" -> "shortcircuit_or.5845fe75b89f8af7_5" ;
"shortcircuit_or.5845fe75b89f8af7_2" [label="2: Exit shortcircuit_or \n  " color=yellow style=filled]
	

"shortcircuit_or.5845fe75b89f8af7_3" [label="3: + \n   END_BRANCHES\n " ]
	

	 "shortcircuit_or.5845fe75b89f8af7_3" -> "shortcircuit_or.5845fe75b89f8af7_4" ;
"shortcircuit_or.5845fe75b89f8af7_4" [label="4:  between_join_and_exit \n   END_BRANCHES\n " shape="box"]
	

	 "shortcircuit_or.5845fe75b89f8af7_4" -> "shortcircuit_or.5845fe75b89f8af7_2" ;
"shortcircuit_or.5845fe75b89f8af7_5" [label="5:  BinaryOperatorStmt: EQ \n   n$1=*&x:int* [line 12, column 7]\n " shape="box"]
	

	 "shortcircuit_or.5845fe75b89f8af7_5" -> "shortcircuit_or.5845fe75b89f8af7_6" ;
	 "shortcircuit_or.5845fe75b89f8af7_5" -> "shortcircuit_or.5845fe75b89f8af7_7" ;
"shortcircuit_or.5845fe75b89f8af7_6" [label="6: Prune (true branch, if (terminated)) \n   PRUNE((n$1 == null), true); [line 12, column 7]\n " shape="invhouse"]
	

	 "shortcircuit_or.5845fe75b89f8af7_6" -> "shortcircuit_or.5845fe75b89f8af7_11" ;
"shortcircuit_or.5845fe75b89f8af7_7" [label="7: Prune (false branch, if (terminated)) \n   PRUNE(!(n$1 == null), false); [line 12, column 7]\n " shape="invhouse"]
	

	 "shortcircuit_or.5845fe75b89f8af7_7" -> "shortcircuit_or.5845fe75b89f8af7_8" ;
"shortcircuit_or.5845fe75b89f8af7_8" [label="8:  BinaryOperatorStmt: EQ \n   n$2=*&x:int* [line 12, column 18]\n  n$3=*n$2:int [line 12, column 17]\n " shape="box"]
	

	 "shortcircuit_or.5845fe75b89f8af7_8" -> "shortcircuit_or.5845fe75b89f8af7_9" ;
	 "shortcircuit_or.5845fe75b89f8af7_8" -> "shortcircuit_or.5845fe75b89f8af7_10" ;
"shortcircuit_or.5845fe75b89f8af7_9" [label="9: Prune (true branch, if (terminated)) \n   PRUNE((n$3 == 2), true); [line 12, column 17]\n " shape="invhouse"]
	

	 "shortcircuit_or.5845fe75b89f8af7_9" -> "shortcircuit_or.5845fe75b89f8af7_11" ;
"shortcircuit_or.5845fe75b89f8af7_10" [label="10: Prune (false branch, if (terminated)) \n   PRUNE(!(n$3 == 2), false); [line 12, column 17]\n " shape="invhouse"]
	

	 "shortcircuit_or.5845fe75b89f8af7_10" -> "shortcircuit_or.5845fe75b89f8af7_12" ;
"shortcircuit_or.5845fe75b89f8af7_11" [label="11:  BinaryOperatorStmt: Assign \n   *&x:int*=17 [line 13, column 5]\n " shape="box"]
	

	 "shortcircuit_or.5845fe75b89f8af7_11" -> "shortcircuit_or.5845fe75b89f8af7_3" ;
"shortcircuit_or.5845fe75b89f8af7_12" [label="12:  BinaryOperatorStmt: Assign \n   *&x:int*=32 [line 15, column 5]\n " shape="box"]
	

	 "shortcircuit_or.5845fe75b89f8af7_12" -> "shortcircuit_or.5845fe75b89f8af7_3" ;
"test_loop.254a9d372f8f4554_1" [label="1: Start test_loop\nFormals: \nLocals:  block_size:char* spec:char* \n  " color=yellow style=filled]
	

	 "test_loop.254a9d372f8f4554_1" -> "test_loop.254a9d372f8f4554_13" ;
"test_loop.254a9d372f8f4554_2" [label="2: Exit test_loop \n  " color=yellow style=filled]
	

"test_loop.254a9d372f8f4554_3" [label="3: + \n  " ]
	

	 "test_loop.254a9d372f8f4554_3" -> "test_loop.254a9d372f8f4554_4" ;
	 "test_loop.254a9d372f8f4554_3" -> "test_loop.254a9d372f8f4554_5" ;
"test_loop.254a9d372f8f4554_4" [label="4: Prune (true branch, while) \n   n$0=*&spec:char* [line 34, column 12]\n  PRUNE(!n$0, true); [line 34, column 12]\n " shape="invhouse"]
	

	 "test_loop.254a9d372f8f4554_4" -> "test_loop.254a9d372f8f4554_6" ;
"test_loop.254a9d372f8f4554_5" [label="5: Prune (false branch, while) \n   n$0=*&spec:char* [line 34, column 12]\n  PRUNE(n$0, false); [line 34, column 12]\n " shape="invhouse"]
	

	 "test_loop.254a9d372f8f4554_5" -> "test_loop.254a9d372f8f4554_2" ;
"test_loop.254a9d372f8f4554_6" [label="6:  BinaryOperatorStmt: Assign \n   n$1=_fun_getenv(\"BLOCK_SIZE\":char*) [line 34, column 29]\n  *&spec:char*=n$1 [line 34, column 22]\n  n$2=*&spec:char* [line 34, column 22]\n " shape="box"]
	

	 "test_loop.254a9d372f8f4554_6" -> "test_loop.254a9d372f8f4554_7" ;
	 "test_loop.254a9d372f8f4554_6" -> "test_loop.254a9d372f8f4554_8" ;
"test_loop.254a9d372f8f4554_7" [label="7: Prune (true branch, while) \n   PRUNE(!n$2, true); [line 34, column 22]\n " shape="invhouse"]
	

	 "test_loop.254a9d372f8f4554_7" -> "test_loop.254a9d372f8f4554_9" ;
"test_loop.254a9d372f8f4554_8" [label="8: Prune (false branch, while) \n   PRUNE(n$2, false); [line 34, column 22]\n " shape="invhouse"]
	

	 "test_loop.254a9d372f8f4554_8" -> "test_loop.254a9d372f8f4554_2" ;
"test_loop.254a9d372f8f4554_9" [label="9:  BinaryOperatorStmt: Assign \n   n$3=_fun_getenv(\"BLOCKSIZE\":char*) [line 35, column 20]\n  *&spec:char*=n$3 [line 35, column 13]\n  n$4=*&spec:char* [line 35, column 13]\n " shape="box"]
	

	 "test_loop.254a9d372f8f4554_9" -> "test_loop.254a9d372f8f4554_10" ;
	 "test_loop.254a9d372f8f4554_9" -> "test_loop.254a9d372f8f4554_11" ;
"test_loop.254a9d372f8f4554_10" [label="10: Prune (true branch, while) \n   PRUNE(!n$4, true); [line 35, column 13]\n " shape="invhouse"]
	

	 "test_loop.254a9d372f8f4554_10" -> "test_loop.254a9d372f8f4554_12" ;
"test_loop.254a9d372f8f4554_11" [label="11: Prune (false branch, while) \n   PRUNE(n$4, false); [line 35, column 13]\n " shape="invhouse"]
	

	 "test_loop.254a9d372f8f4554_11" -> "test_loop.254a9d372f8f4554_2" ;
"test_loop.254a9d372f8f4554_12" [label="12:  BinaryOperatorStmt: Assign \n   *&block_size:char*=null [line 36, column 5]\n " shape="box"]
	

	 "test_loop.254a9d372f8f4554_12" -> "test_loop.254a9d372f8f4554_3" ;
"test_loop.254a9d372f8f4554_13" [label="13:  BinaryOperatorStmt: Assign \n   n$6=_fun_getenv(\"BLOCK\":char*) [line 32, column 10]\n  *&spec:char*=n$6 [line 32, column 3]\n " shape="box"]
	

	 "test_loop.254a9d372f8f4554_13" -> "test_loop.254a9d372f8f4554_3" ;
}
