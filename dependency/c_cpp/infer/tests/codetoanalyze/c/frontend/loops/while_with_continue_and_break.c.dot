/* @generated */
digraph cfg {
"main.fad58de7366495db_1" [label="1: Start main\nFormals: \nLocals:  x:int \n  " color=yellow style=filled]
	

	 "main.fad58de7366495db_1" -> "main.fad58de7366495db_19" ;
"main.fad58de7366495db_2" [label="2: Exit main \n  " color=yellow style=filled]
	

"main.fad58de7366495db_3" [label="3:  Return Stmt \n   *&return:int=0 [line 21, column 3]\n " shape="box"]
	

	 "main.fad58de7366495db_3" -> "main.fad58de7366495db_2" ;
"main.fad58de7366495db_4" [label="4: + \n  " ]
	

	 "main.fad58de7366495db_4" -> "main.fad58de7366495db_5" ;
	 "main.fad58de7366495db_4" -> "main.fad58de7366495db_6" ;
"main.fad58de7366495db_5" [label="5: Prune (true branch, while) \n   PRUNE(1, true); [line 10, column 10]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_5" -> "main.fad58de7366495db_11" ;
"main.fad58de7366495db_6" [label="6: Prune (false branch, while) \n   PRUNE(!1, false); [line 10, column 10]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_6" -> "main.fad58de7366495db_3" ;
"main.fad58de7366495db_7" [label="7: + \n   END_BRANCHES\n " ]
	

	 "main.fad58de7366495db_7" -> "main.fad58de7366495db_4" ;
"main.fad58de7366495db_8" [label="8:  BinaryOperatorStmt: EQ \n   n$0=*&x:int [line 17, column 9]\n " shape="box"]
	

	 "main.fad58de7366495db_8" -> "main.fad58de7366495db_9" ;
	 "main.fad58de7366495db_8" -> "main.fad58de7366495db_10" ;
"main.fad58de7366495db_9" [label="9: Prune (true branch, if (terminated)) \n   PRUNE((n$0 == 2), true); [line 17, column 9]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_9" -> "main.fad58de7366495db_4" ;
"main.fad58de7366495db_10" [label="10: Prune (false branch, if (terminated)) \n   PRUNE(!(n$0 == 2), false); [line 17, column 9]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_10" -> "main.fad58de7366495db_7" ;
"main.fad58de7366495db_11" [label="11: + \n  " ]
	

	 "main.fad58de7366495db_11" -> "main.fad58de7366495db_12" ;
	 "main.fad58de7366495db_11" -> "main.fad58de7366495db_13" ;
"main.fad58de7366495db_12" [label="12: Prune (true branch, while) \n   PRUNE(2, true); [line 11, column 12]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_12" -> "main.fad58de7366495db_18" ;
"main.fad58de7366495db_13" [label="13: Prune (false branch, while) \n   PRUNE(!2, false); [line 11, column 12]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_13" -> "main.fad58de7366495db_8" ;
"main.fad58de7366495db_14" [label="14: + \n   END_BRANCHES\n " ]
	

	 "main.fad58de7366495db_14" -> "main.fad58de7366495db_11" ;
"main.fad58de7366495db_15" [label="15:  BinaryOperatorStmt: GT \n   n$4=*&x:int [line 13, column 11]\n " shape="box"]
	

	 "main.fad58de7366495db_15" -> "main.fad58de7366495db_16" ;
	 "main.fad58de7366495db_15" -> "main.fad58de7366495db_17" ;
"main.fad58de7366495db_16" [label="16: Prune (true branch, if (terminated)) \n   PRUNE((n$4 > 5), true); [line 13, column 11]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_16" -> "main.fad58de7366495db_8" ;
"main.fad58de7366495db_17" [label="17: Prune (false branch, if (terminated)) \n   PRUNE(!(n$4 > 5), false); [line 13, column 11]\n " shape="invhouse"]
	

	 "main.fad58de7366495db_17" -> "main.fad58de7366495db_14" ;
"main.fad58de7366495db_18" [label="18:  BinaryOperatorStmt: AddAssign \n   n$8=*&x:int [line 12, column 7]\n  *&x:int=(n$8 + 1) [line 12, column 7]\n " shape="box"]
	

	 "main.fad58de7366495db_18" -> "main.fad58de7366495db_15" ;
"main.fad58de7366495db_19" [label="19:  DeclStmt \n   VARIABLE_DECLARED(x:int); [line 9, column 3]\n  *&x:int=0 [line 9, column 3]\n " shape="box"]
	

	 "main.fad58de7366495db_19" -> "main.fad58de7366495db_4" ;
}
